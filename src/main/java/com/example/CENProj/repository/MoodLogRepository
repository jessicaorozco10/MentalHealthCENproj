package com.example.CENProj.repository;

// Import the MoodLog entity class which represents mood log records in the database
import com.example.CENProj.model.MoodLog;

// Import JpaRepository for basic CRUD and query operations
import org.springframework.data.jpa.repository.JpaRepository;

// Import annotation to mark this interface as a Spring-managed repository bean
import org.springframework.stereotype.Repository;

// Import Java utility types for date/time and collections
import java.time.Instant;
import java.util.List;
import java.util.Optional;

@Repository // Marks this interface as a Spring Data repository
public interface MoodLogRepository extends JpaRepository<MoodLog, Integer> {
    // Inherits basic CRUD methods like save(), findById(), delete(), findAll(), etc.
    // MoodLog is the entity type, and Integer is the type of its primary key (Log_ID)

    /**
     * Custom query method: Find all mood logs for a specific user by their user ID.
     *
     * @param userId the ID of the user whose mood logs we want to retrieve
     * @return a List of MoodLog objects associated with the specified user
     */
    List<MoodLog> findByUser_Id(int userId);  // "User_Id" refers to the foreign key in MoodLog

    /**
     * Custom query method: Retrieve all mood logs by user ID, sorted from newest to oldest.
     * This supports quick access to the most recent entries (e.g., for user dashboards).
     *
     * @param userId the ID of the user
     * @return a list of mood logs in reverse chronological order
     */
    List<MoodLog> findAllByUser_IdOrderByLogTimestampDesc(int userId);

    /**
     * Custom query method: Fetch the latest mood entry made by a user.
     * Useful when displaying the user's most recent mood on login or dashboard.
     *
     * @param userId the ID of the user
     * @return an Optional containing the most recent mood log, or empty if none found
     */
    Optional<MoodLog> findTopByUser_IdOrderByLogTimestampDesc(int userId);

    /**
     * Custom query method: Fetch all mood logs for a user within a specific time range.
     * This is ideal for showing trends over time or generating mood heatmaps.
     *
     * @param userId the ID of the user
     * @param start the starting point in time (inclusive)
     * @param end the ending point in time (inclusive)
     * @return a list of MoodLog entries recorded within the specified timeframe
     */
    List<MoodLog> findAllByUser_IdAndLogTimestampBetween(int userId, Instant start, Instant end);

    /**
     * Custom query method: Count the total number of mood logs submitted by a specific user.
     * Useful for analytics, badges, or tracking consistency over time.
     *
     * @param userId the ID of the user
     * @return the total number of mood logs associated with the user
     */
    long countByUser_Id(int userId);

    /**
     * Custom query method: Check if a mood log exists for a user within a specific day.
     * Can be used to enforce daily logging habits or prevent duplicate logs.
     *
     * @param userId the ID of the user
     * @param dayStart start of the day (e.g., 00:00:00 UTC)
     * @param dayEnd end of the day (e.g., 23:59:59 UTC)
     * @return true if a log was found for that day, false otherwise
     */
    boolean existsByUser_IdAndLogTimestampBetween(int userId, Instant dayStart, Instant dayEnd);
}
